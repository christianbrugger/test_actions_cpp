# Syntax:
# https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions
#
# Contexts:
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs

name: CMake Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  LS_QT_VERSION: 6.7.2

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - preset: win-msvc-release
            os: windows-2022
          - preset: win-clang-release
            os: windows-2022
          - preset: linux-gcc-release
            os: ubuntu-24.04
          - preset: linux-clang-release
            os: ubuntu-24.04
            system_qt: true

    env:
      # ask apt-get to never interact
      DEBIAN_FRONTEND: noninteractive
      # set default platform plugin for qt so the executables can run
      QT_QPA_PLATFORM: offscreen

      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: 'true'
      CCACHE_COMPRESSLEVEL: '6'
      CCACHE_MAXSIZE: '600M'
      
      CCACHE_NOHASHDIR: 'true'
      CCACHE_SLOPPINESS: 'pch_defines,time_macros,include_file_mtime,include_file_ctime'
      CCACHE_DEPEND: 'true'

    steps:

    #
    # Manual Clone the Repository
    #
    # Replacing the standard checkout with a mnaul clone. The action
    # sets & unsets credentials for all submodules which is very 
    # slow on windows and its not needed.
    #
    # Standard checkout (including post run action)
    #       uses: actions/checkout@v4
    #  ubuntu-24.04:    2 seconds
    #  windows-2022:   17 seconds
    #
    # Manual clone:
    #   ubuntu-24.04:   1 seconds    ( 2x speedup)
    #   windows-2022:   2 seconds    (8.5x speedup)
    #
    - name: Git Clone
      run: >
        git clone --depth 1 
        --branch ${{ github.ref_name }} 
        https://github.com/${{ github.repository }}.git 
        ${{ github.workspace }}

        
    #
    # Install CCache
    #

    
    - name: Install CCache Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install --yes --no-install-suggests ccache

    - name: Install CCache Windows
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Uri 'https://github.com/ccache/ccache/releases/download/v4.10.2/ccache-4.10.2-windows-x86_64.zip' -OutFile 'ccache.zip'
        Expand-Archive -Path 'ccache.zip' -DestinationPath '.'
        mv 'ccache-4.10.2-windows-x86_64/ccache.exe' 'C:/Windows/System32/'
        rm -r 'ccache-4.10.2-windows-x86_64'
        rm 'ccache.zip'

    - name: Test CCache
      if: runner.os == 'Linux'
      run: |
        ccache --show-config
        
    - name: Test CCache
      if: runner.os == 'Windows'
      run: |
        ccache.exe --show-config

    - name: ccache cache files
      uses: actions/cache@v4
      with:
        key: ${{ matrix.preset }}-ccache-${{ github.event.repository.updated_at }}
        path: .ccache
        restore-keys: |
          ${{ matrix.preset }}-ccache-




    - name: Test
      if: runner.os == 'Linux'
      run: |
        ccache --show-config
        ccache -s
        ccache -z
        ccache -s
    - name: Test
      if: runner.os == 'Windows'
      run: |
        ccache.exe -p
        ccache.exe -s
        ccache.exe -z
        ccache.exe -s



    #
    # Installing Workflow Dependencies
    #

    # Make MSVC compiler discoverable by CMake 
    - uses: ilammy/msvc-dev-cmd@v1

    # Use Ninja for the build system instead of Make
    - uses: seanmiddleditch/gha-setup-ninja@v5

    # New Python to use project scripts
    # - name: Set up Python
    #   if: runner.os == 'Windows'
    #   uses: actions/setup-python@v5
    #   with:
    #     python-version: '3.11'



    #
    # Submodule Checkout (cached)
    #

    - name: Submodule Hash
      working-directory: ${{ github.workspace }}
      run: |
        git submodule status > submodule_hashes.txt
        cat submodule_hashes.txt
    - name: Restore Submodule
      id: cache-submodule-restore
      uses: actions/cache/restore@v4
      with:
        path: external/*/
        key: ${{ matrix.os }}-submodule-${{ hashFiles('submodule_hashes.txt') }}-2
    - name: Refresh Submodule
      if: steps.cache-submodule-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Cache Submodule
      if: steps.cache-submodule-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: external/*/
        key: ${{ steps.cache-submodule-restore.outputs.cache-primary-key }}



    #
    # Define Variables
    #

    - name: Variables
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/${{ matrix.preset }}" >> "$GITHUB_OUTPUT"
    


    #
    # Install Qt
    #

    - name: Install Latest Qt
      if: ${{ ! matrix.system_qt }}
      uses: jurplel/install-qt-action@v4
      with: 
        version: ${{ env.LS_QT_VERSION }}
        archives: 'icu qtbase qtsvg'
        cache-key-prefix: install-qt-action-v4-${{ env.LS_QT_VERSION }}-${{ matrix.os }}-icu-qtbase-qtsvg
        cache: true
        
    - name: Install System Qt
      if: runner.os == 'Linux' && matrix.system_qt
      run: |
        sudo apt-get update
        sudo apt-get install --yes --no-install-suggests \
            qt6-base-dev libqt6svg6 qt6-base-private-dev



    #
    # Build
    #

    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      run: |
        cmake --version
        cmake --preset ${{ matrix.preset }}

    - name: Build
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ninja -v


    #
    # Test
    #
    
    - name: Test Linux
      if: runner.os == 'Linux'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ./action_cli
    
    - name: Test Windows
      if: runner.os == 'Windows'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ./action_cli.exe

    
    - name: Test
      if: runner.os == 'Linux'
      run: |
        ccache -s
    - name: Test
      if: runner.os == 'Windows'
      run: |
        ccache.exe -s
